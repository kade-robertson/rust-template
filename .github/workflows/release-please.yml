on:
  push:
    branches:
      - master

env:
  PACKAGE: rust-template
  SCCACHE_GHA_ENABLED: true
  RUSTC_WRAPPER: sccache

name: release-please
jobs:
  release-please:
    name: release-please
    runs-on: ubuntu-latest
    outputs:
      did_release: ${{ steps.release.outputs.releases_created }}
      tag_name: ${{ steps.release.outputs.tag_name }}
      version: ${{ steps.release.outputs.version }}
    steps:
      - uses: googleapis/release-please-action@v4
        id: release
        with:
          config-file: release-please-config.json
          manifest-file: .release-please-manifest.json
  build-artifacts:
    name: build-artifacts (rust-template, ${{ matrix.os }})
    needs: release-please
    if: ${{ needs.release-please.outputs.did_release == 'true' }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
    steps:
      - uses: actions/checkout@v4
      - id: toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable

      - name: Run sccache-cache
        uses: mozilla-actions/sccache-action@v0.0.5

      - uses: actions/setup-node@v4
        with:
          node-version: "16"

      - name: Build
        run: cargo build --release --locked --bin ${{ env.PACKAGE }}

      - name: Move executable
        run: |
          npm install -g move-file-cli mkdirp
          mkdirp artifacts
          if [ "$RUNNER_OS" == "Windows" ]; then
            move-file "target/release/${{ env.PACKAGE }}.exe" "artifacts/${{ env.PACKAGE }}-${{ needs.release-please.outputs.version }}.exe"
          elif [ "$RUNNER_OS" == "Linux" ]; then
            move-file "target/release/${{ env.PACKAGE }}" "artifacts/${{ env.PACKAGE }}-${{ needs.release-please.outputs.version }}-linux"
          else
            move-file "target/release/${{ env.PACKAGE }}" "artifacts/${{ env.PACKAGE }}-${{ needs.release-please.outputs.version }}-mac"
          fi
        shell: bash

      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          files: artifacts/*
          tag_name: ${{ needs.release-please.outputs.tag_name }}
  build-docker:
    name: build-docker (rust-template)
    needs: release-please
    if: ${{ needs.release-please.outputs.did_release == 'true' }}
    runs-on: ubuntu-latest
    env:
      REGISTRY: ghcr.io
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Debian Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}
          tags: |
            type=semver,pattern={{version}},value=${{ needs.release-please.outputs.tag_name }}
            type=semver,pattern={{major}}.{{minor}},value=${{ needs.release-please.outputs.tag_name }}
            type=semver,pattern={{major}},value=${{ needs.release-please.outputs.tag_name }}
            type=ref,event=branch
            type=ref,event=pr
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Extract metadata for Alpine Docker
        id: meta-alpine
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}
          flavor: |
            suffix=-alpine,onlatest=true
          tags: |
            type=semver,pattern={{version}},value=${{ needs.release-please.outputs.tag_name }}
            type=semver,pattern={{major}}.{{minor}},value=${{ needs.release-please.outputs.tag_name }}
            type=semver,pattern={{major}},value=${{ needs.release-please.outputs.tag_name }}
            type=ref,event=branch
            type=ref,event=pr
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Debian Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            PACKAGE=${{ env.PACKAGE }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Alpine Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.alpine
          push: true
          tags: ${{ steps.meta-alpine.outputs.tags }}
          labels: ${{ steps.meta-alpine.outputs.labels }}
          build-args: |
            PACKAGE=${{ env.PACKAGE }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
